buildscript {
    // The Android Gradle plugin is only required when opening the android folder stand-alone.
    // This avoids unnecessary downloads and potential conflicts when the library is included as a
    // module dependency in an application project.
    if (project == rootProject) {
        repositories {
            mavenCentral()
            google()
        }

        dependencies {
            classpath("com.android.tools.build:gradle:7.4.2")
            classpath "com.diffplug.spotless:spotless-plugin-gradle:6.17.0"
        }
    }
}

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

if (project == rootProject) {
    apply from: 'spotless.gradle'
}

apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 28)
    def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
    if (agpVersion.tokenize('.')[0].toInteger() >= 7) {
        namespace "com.horcrux.svg"
    }
    if (agpVersion.tokenize('.')[0].toInteger() >= 8) {
        buildFeatures {
            buildConfig = true
        }
    }
    // Used to override the NDK path/version on internal CI or by allowing
    // users to customize the NDK path/version from their root project (e.g. for M1 support)
    if (rootProject.hasProperty("ndkPath")) {
        ndkPath rootProject.ext.ndkPath
    }
    if (rootProject.hasProperty("ndkVersion")) {
        ndkVersion rootProject.ext.ndkVersion
    }

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        //noinspection OldTargetApi
        targetSdkVersion safeExtGet('targetSdkVersion', 28)
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

        consumerProguardFiles 'proguard-rules.pro'
    }
    lintOptions {
        abortOnError false
    }

    sourceSets.main {
        java {
            if (!isNewArchitectureEnabled()) {
                srcDirs += [
                    "src/paper/java",
                ]
            }
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    google()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
}

dependencies {
    implementation 'com.facebook.react:react-native:+'
}

def isRNSVGExampleApp() {
    return project.hasProperty('isRNSVGExampleApp') && project.property('isRNSVGExampleApp') == "true"
}

def getAbsoluteCodegenArtifactsPaperDestination() {
    if (!project.hasProperty('codegenArtifactsPaperDestination')) {
        throw new Exception('[RNSVG] Please fill codegenArtifactsPaperDestination variable in android/gradle.properties correct path to paper paper destination')
    }

    return "${project.rootDir}/../../${project.property('codegenArtifactsPaperDestination')}"
}

def getAbsoluteCodegenArtifactsSource() {
    if (!project.hasProperty('codegenArtifactsSource')) {
        throw new Exception('[RNSVG] Please fill codegenArtifactsSource variable in android/gradle.properties correct path to codegenerated artifacts')
    }

    return "${project.rootDir}/../../${project.property('codegenArtifactsSource')}"
}


tasks.register("copyCodegenArtifacts") {
    group 'After build tasks'
    description 'Tasks which copy codegen artifacts to paper architecture'
    
    if (!isRNSVGExampleApp() || !isNewArchitectureEnabled()) {
        return
    }

    dependsOn tasks.generateCodegenArtifactsFromSchema

    doLast {

        def absoluteCodegenArtifactsPaperDestination = getAbsoluteCodegenArtifactsPaperDestination()
        def absoluteCodegenArtifactsSource = getAbsoluteCodegenArtifactsSource()

        def existingFiles = fileTree(absoluteCodegenArtifactsPaperDestination).matching {
            include '**/*.java'
        }

        def generatedFiles = fileTree(absoluteCodegenArtifactsSource).matching {
            include '**/*.java'
        }

        def existingFilesMap = [:]

        existingFiles.forEach { existingFile ->
            existingFilesMap[existingFile.name] = 1
        }

        generatedFiles.forEach { generatedFile -> 
            if (!existingFilesMap.containsKey(generatedFile.name)) {
                logger.warn("[RNSVG] ${generatedFile.name} not found in paper dir, if it's used in Android you need to copy it manually and implement yourself before using auto-copy feature")
            }
        }

        if (existingFiles.size() == 0) {
            logger.warn("[RNSVG] Paper destination with codegen interfaces is empty. This might be okay if you don't have any interfaces/delegates used in Android, if that's not the case please check if codegenArtifactsPaperDestination in android/gradle.properties is correct")
        }

        if (existingFiles.size() > generatedFiles.size()) {
            throw new Exception("[RNSVG] Number od generated artifacts should be greather then or equal to paper interfaces. Please check if codegenArtifactsSource in android/gradle.properties is correct")
        }

        copy {
            from absoluteCodegenArtifactsSource
            include existingFiles.collect { it.name }
            into absoluteCodegenArtifactsPaperDestination
        }
    }
}

if (isRNSVGExampleApp() && isNewArchitectureEnabled()) {
    tasks.generateCodegenArtifactsFromSchema.finalizedBy('copyCodegenArtifacts')
}
